Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DEFINE
    DEFINED
    ENDIF
    IFDEF
    PRAGMA
    SHARP
    UNDEF
    VERSION

Grammar

Rule 0     S' -> comment
Rule 1     comment -> COMMENT
Rule 2     variable_identifier -> IDENTIFIER
Rule 3     primary_expression -> variable_identifier
Rule 4     primary_expression -> INTCONSTANT
Rule 5     primary_expression -> UINTCONSTANT
Rule 6     primary_expression -> FLOATCONSTANT
Rule 7     primary_expression -> BOOLCONSTANT
Rule 8     primary_expression -> LEFT_PAREN expression RIGHT_PAREN
Rule 9     postfix_expression -> primary_expression
Rule 10    postfix_expression -> postfix_expression LEFT_BRACKET integer_expression RIGHT_BRACKET
Rule 11    postfix_expression -> function_call
Rule 12    postfix_expression -> postfix_expression DOT FIELD_SELECTION
Rule 13    postfix_expression -> postfix_expression INC_OP
Rule 14    postfix_expression -> postfix_expression DEC_OP
Rule 15    integer_expression -> expression
Rule 16    function_call -> function_call_or_method
Rule 17    function_call_or_method -> function_call_generic
Rule 18    function_call_or_method -> postfix_expression DOT function_call_generic
Rule 19    function_call_generic -> function_call_header_with_parameters RIGHT_PAREN
Rule 20    function_call_generic -> function_call_header_no_parameters RIGHT_PAREN
Rule 21    function_call_header_no_parameters -> function_call_header VOID
Rule 22    function_call_header_no_parameters -> function_call_header
Rule 23    function_call_header_with_parameters -> function_call_header assignment_expression
Rule 24    function_call_header_with_parameters -> function_call_header_with_parameters COMMA assignment_expression
Rule 25    function_call_header -> function_identifier LEFT_PAREN
Rule 26    function_identifier -> type_specifier
Rule 27    function_identifier -> IDENTIFIER
Rule 28    function_identifier -> FIELD_SELECTION
Rule 29    unary_expression -> postfix_expression
Rule 30    unary_expression -> INC_OP unary_expression
Rule 31    unary_expression -> DEC_OP unary_expression
Rule 32    unary_expression -> unary_operator unary_expression
Rule 33    unary_operator -> PLUS
Rule 34    unary_operator -> DASH
Rule 35    unary_operator -> BANG
Rule 36    unary_operator -> TILDE
Rule 37    multiplicative_expression -> unary_expression
Rule 38    multiplicative_expression -> multiplicative_expression STAR unary_expression
Rule 39    multiplicative_expression -> multiplicative_expression SLASH unary_expression
Rule 40    multiplicative_expression -> multiplicative_expression PERCENT unary_expression
Rule 41    additive_expression -> multiplicative_expression
Rule 42    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 43    additive_expression -> additive_expression DASH multiplicative_expression
Rule 44    shift_expression -> additive_expression
Rule 45    shift_expression -> shift_expression LEFT_OP additive_expression
Rule 46    shift_expression -> shift_expression RIGHT_OP additive_expression
Rule 47    relational_expression -> shift_expression
Rule 48    relational_expression -> relational_expression LEFT_ANGLE shift_expression
Rule 49    relational_expression -> relational_expression RIGHT_ANGLE shift_expression
Rule 50    relational_expression -> relational_expression LE_OP shift_expression
Rule 51    relational_expression -> relational_expression GE_OP shift_expression
Rule 52    equality_expression -> relational_expression
Rule 53    equality_expression -> equality_expression EQ_OP relational_expression
Rule 54    equality_expression -> equality_expression NE_OP relational_expression
Rule 55    and_expression -> equality_expression
Rule 56    and_expression -> and_expression AMPERSAND equality_expression
Rule 57    exclusive_or_expression -> and_expression
Rule 58    exclusive_or_expression -> exclusive_or_expression CARET and_expression
Rule 59    inclusive_or_expression -> exclusive_or_expression
Rule 60    inclusive_or_expression -> inclusive_or_expression VERTICAL_BAR exclusive_or_expression
Rule 61    logical_and_expression -> inclusive_or_expression
Rule 62    logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression
Rule 63    logical_xor_expression -> logical_and_expression
Rule 64    logical_xor_expression -> logical_xor_expression XOR_OP logical_and_expression
Rule 65    logical_or_expression -> logical_xor_expression
Rule 66    logical_or_expression -> logical_or_expression OR_OP logical_xor_expression
Rule 67    conditional_expression -> logical_or_expression
Rule 68    conditional_expression -> logical_or_expression QUESTION expression COLON assignment_expression
Rule 69    assignment_expression -> conditional_expression
Rule 70    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 71    assignment_operator -> EQUAL
Rule 72    assignment_operator -> MUL_ASSIGN
Rule 73    assignment_operator -> DIV_ASSIGN
Rule 74    assignment_operator -> MOD_ASSIGN
Rule 75    assignment_operator -> ADD_ASSIGN
Rule 76    assignment_operator -> SUB_ASSIGN
Rule 77    assignment_operator -> LEFT_ASSIGN
Rule 78    assignment_operator -> RIGHT_ASSIGN
Rule 79    assignment_operator -> AND_ASSIGN
Rule 80    assignment_operator -> XOR_ASSIGN
Rule 81    assignment_operator -> OR_ASSIGN
Rule 82    expression -> assignment_expression
Rule 83    expression -> expression COMMA assignment_expression
Rule 84    constant_expression -> conditional_expression
Rule 85    declaration -> function_prototype SEMICOLON
Rule 86    declaration -> init_declarator_list SEMICOLON
Rule 87    declaration -> PRECISION precision_qualifier type_specifier_no_prec SEMICOLON
Rule 88    function_prototype -> function_declarator RIGHT_PAREN
Rule 89    function_declarator -> function_header
Rule 90    function_declarator -> function_header_with_parameters
Rule 91    function_header_with_parameters -> function_header parameter_declaration
Rule 92    function_header_with_parameters -> function_header_with_parameters COMMA parameter_declaration
Rule 93    function_header -> fully_specified_type IDENTIFIER LEFT_PAREN
Rule 94    parameter_declarator -> type_specifier IDENTIFIER
Rule 95    parameter_declarator -> type_specifier IDENTIFIER LEFT_BRACKET constant_expression RIGHT_BRACKET
Rule 96    parameter_declaration -> parameter_type_qualifier parameter_qualifier parameter_declarator
Rule 97    parameter_declaration -> parameter_qualifier parameter_declarator
Rule 98    parameter_declaration -> parameter_type_qualifier parameter_qualifier parameter_type_specifier
Rule 99    parameter_declaration -> parameter_qualifier parameter_type_specifier
Rule 100   parameter_qualifier -> <empty>
Rule 101   parameter_qualifier -> IN
Rule 102   parameter_qualifier -> OUT
Rule 103   parameter_qualifier -> INOUT
Rule 104   parameter_type_specifier -> type_specifier
Rule 105   init_declarator_list -> single_declaration
Rule 106   init_declarator_list -> init_declarator_list COMMA IDENTIFIER
Rule 107   init_declarator_list -> init_declarator_list COMMA IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
Rule 108   init_declarator_list -> init_declarator_list COMMA IDENTIFIER LEFT_BRACKET constant_expression RIGHT_BRACKET
Rule 109   init_declarator_list -> init_declarator_list COMMA IDENTIFIER LEFT_BRACKET RIGHT_BRACKET EQUAL initializer
Rule 110   init_declarator_list -> init_declarator_list COMMA IDENTIFIER LEFT_BRACKET constant_expression RIGHT_BRACKET EQUAL initializer
Rule 111   init_declarator_list -> init_declarator_list COMMA IDENTIFIER EQUAL initializer
Rule 112   single_declaration -> fully_specified_type
Rule 113   single_declaration -> fully_specified_type IDENTIFIER
Rule 114   single_declaration -> fully_specified_type IDENTIFIER LEFT_BRACKET RIGHT_BRACKET
Rule 115   single_declaration -> fully_specified_type IDENTIFIER LEFT_BRACKET constant_expression RIGHT_BRACKET
Rule 116   single_declaration -> fully_specified_type IDENTIFIER LEFT_BRACKET RIGHT_BRACKET EQUAL initializer
Rule 117   single_declaration -> fully_specified_type IDENTIFIER LEFT_BRACKET constant_expression
Rule 118   single_declaration -> fully_specified_type IDENTIFIER EQUAL initializer
Rule 119   single_declaration -> INVARIANT IDENTIFIER
Rule 120   fully_specified_type -> type_specifier
Rule 121   fully_specified_type -> type_qualifier type_specifier
Rule 122   invariant_qualifier -> INVARIANT
Rule 123   interpolation_qualifier -> SMOOTH
Rule 124   interpolation_qualifier -> FLAT
Rule 125   interpolation_qualifier -> NOPERSPECTIVE
Rule 126   parameter_type_qualifier -> CONST
Rule 127   type_qualifier -> storage_qualifier
Rule 128   type_qualifier -> interpolation_qualifier type_qualifier
Rule 129   type_qualifier -> invariant_qualifier type_qualifier
Rule 130   type_qualifier -> invariant_qualifier interpolation_qualifier type_qualifier
Rule 131   storage_qualifier -> <empty>
Rule 132   storage_qualifier -> CONST
Rule 133   storage_qualifier -> ATTRIBUTE
Rule 134   storage_qualifier -> VARYING
Rule 135   storage_qualifier -> CENTROID VARYING
Rule 136   storage_qualifier -> IN
Rule 137   storage_qualifier -> OUT
Rule 138   storage_qualifier -> CENTROID IN
Rule 139   storage_qualifier -> CENTROID OUT
Rule 140   storage_qualifier -> UNIFORM
Rule 141   type_specifier -> type_specifier_no_prec
Rule 142   type_specifier -> precision_qualifier type_specifier_no_prec
Rule 143   type_specifier_no_prec -> type_specifier_nonarray
Rule 144   type_specifier_no_prec -> type_specifier_nonarray LEFT_BRACKET RIGHT_BRACKET
Rule 145   type_specifier_no_prec -> type_specifier_nonarray LEFT_BRACKET constant_expression RIGHT_BRACKET
Rule 146   type_specifier_nonarray -> VOID
Rule 147   type_specifier_nonarray -> FLOAT
Rule 148   type_specifier_nonarray -> INT
Rule 149   type_specifier_nonarray -> UINT
Rule 150   type_specifier_nonarray -> BOOL
Rule 151   type_specifier_nonarray -> VEC2
Rule 152   type_specifier_nonarray -> VEC3
Rule 153   type_specifier_nonarray -> VEC4
Rule 154   type_specifier_nonarray -> BVEC2
Rule 155   type_specifier_nonarray -> BVEC3
Rule 156   type_specifier_nonarray -> BVEC4
Rule 157   type_specifier_nonarray -> IVEC2
Rule 158   type_specifier_nonarray -> IVEC3
Rule 159   type_specifier_nonarray -> IVEC4
Rule 160   type_specifier_nonarray -> UVEC2
Rule 161   type_specifier_nonarray -> UVEC3
Rule 162   type_specifier_nonarray -> UVEC4
Rule 163   type_specifier_nonarray -> MAT2
Rule 164   type_specifier_nonarray -> MAT3
Rule 165   type_specifier_nonarray -> MAT4
Rule 166   type_specifier_nonarray -> MAT2X2
Rule 167   type_specifier_nonarray -> MAT2X3
Rule 168   type_specifier_nonarray -> MAT2X4
Rule 169   type_specifier_nonarray -> MAT3X2
Rule 170   type_specifier_nonarray -> MAT3X3
Rule 171   type_specifier_nonarray -> MAT3X4
Rule 172   type_specifier_nonarray -> MAT4X2
Rule 173   type_specifier_nonarray -> MAT4X3
Rule 174   type_specifier_nonarray -> MAT4X4
Rule 175   type_specifier_nonarray -> SAMPLER1D
Rule 176   type_specifier_nonarray -> SAMPLER2D
Rule 177   type_specifier_nonarray -> SAMPLER3D
Rule 178   type_specifier_nonarray -> SAMPLERCUBE
Rule 179   type_specifier_nonarray -> SAMPLER1DSHADOW
Rule 180   type_specifier_nonarray -> SAMPLER2DSHADOW
Rule 181   type_specifier_nonarray -> SAMPLERCUBESHADOW
Rule 182   type_specifier_nonarray -> SAMPLER1DARRAY
Rule 183   type_specifier_nonarray -> SAMPLER2DARRAY
Rule 184   type_specifier_nonarray -> SAMPLER1DARRAYSHADOW
Rule 185   type_specifier_nonarray -> SAMPLER2DARRAYSHADOW
Rule 186   type_specifier_nonarray -> ISAMPLER1D
Rule 187   type_specifier_nonarray -> ISAMPLER2D
Rule 188   type_specifier_nonarray -> ISAMPLER3D
Rule 189   type_specifier_nonarray -> ISAMPLERCUBE
Rule 190   type_specifier_nonarray -> ISAMPLER1DARRAY
Rule 191   type_specifier_nonarray -> ISAMPLER2DARRAY
Rule 192   type_specifier_nonarray -> USAMPLER1D
Rule 193   type_specifier_nonarray -> USAMPLER2D
Rule 194   type_specifier_nonarray -> USAMPLER3D
Rule 195   type_specifier_nonarray -> USAMPLERCUBE
Rule 196   type_specifier_nonarray -> USAMPLER1DARRAY
Rule 197   type_specifier_nonarray -> USAMPLER2DARRAY
Rule 198   type_specifier_nonarray -> struct_specifier
Rule 199   type_specifier_nonarray -> TYPE_NAME
Rule 200   precision_qualifier -> HIGH_PRECISION
Rule 201   precision_qualifier -> MEDIUM_PRECISION
Rule 202   precision_qualifier -> LOW_PRECISION
Rule 203   struct_specifier -> STRUCT IDENTIFIER LEFT_BRACE struct_declaration_list RIGHT_BRACE
Rule 204   struct_specifier -> STRUCT LEFT_BRACE struct_declaration_list RIGHT_BRACE
Rule 205   struct_declaration_list -> struct_declaration
Rule 206   struct_declaration_list -> struct_declaration_list struct_declaration
Rule 207   struct_declaration -> type_specifier struct_declarator_list SEMICOLON
Rule 208   struct_declarator_list -> struct_declarator
Rule 209   struct_declarator_list -> struct_declarator_list COMMA struct_declarator
Rule 210   struct_declarator -> IDENTIFIER
Rule 211   struct_declarator -> IDENTIFIER LEFT_BRACKET constant_expression RIGHT_BRACKET
Rule 212   initializer -> assignment_expression
Rule 213   declaration_statement -> <empty>
Rule 214   declaration_statement -> declaration
Rule 215   statement -> compound_statement
Rule 216   statement -> simple_statement
Rule 217   simple_statement -> declaration_statement
Rule 218   simple_statement -> expression_statement
Rule 219   simple_statement -> selection_statement
Rule 220   simple_statement -> switch_statement
Rule 221   simple_statement -> case_label
Rule 222   simple_statement -> iteration_statement
Rule 223   simple_statement -> jump_statement
Rule 224   compound_statement -> LEFT_BRACE RIGHT_BRACE
Rule 225   compound_statement -> LEFT_BRACE statement_list RIGHT_BRACE
Rule 226   statement_no_new_scope -> compound_statement_no_new_scope
Rule 227   statement_no_new_scope -> simple_statement
Rule 228   compound_statement_no_new_scope -> LEFT_BRACE RIGHT_BRACE
Rule 229   compound_statement_no_new_scope -> LEFT_BRACE statement_list RIGHT_BRACE
Rule 230   statement_list -> statement
Rule 231   statement_list -> statement_list statement
Rule 232   expression_statement -> SEMICOLON
Rule 233   expression_statement -> expression SEMICOLON
Rule 234   selection_statement -> IF LEFT_PAREN expression RIGHT_PAREN selection_rest_statement
Rule 235   selection_rest_statement -> statement ELSE statement
Rule 236   selection_rest_statement -> statement
Rule 237   condition -> expression
Rule 238   condition -> fully_specified_type IDENTIFIER EQUAL initializer
Rule 239   switch_statement -> SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_BRACE switch_statement_list RIGHT_BRACE
Rule 240   switch_statement_list -> <empty>
Rule 241   switch_statement_list -> statement_list
Rule 242   case_label -> CASE expression COLON
Rule 243   case_label -> DEFAULT COLON
Rule 244   iteration_statement -> WHILE LEFT_PAREN condition RIGHT_PAREN statement_no_new_scope
Rule 245   iteration_statement -> DO statement WHILE LEFT_PAREN expression RIGHT_PAREN SEMICOLON
Rule 246   iteration_statement -> FOR LEFT_PAREN for_init_statement for_rest_statement RIGHT_PAREN
Rule 247   iteration_statement -> statement_no_new_scope
Rule 248   for_init_statement -> expression_statement
Rule 249   for_init_statement -> declaration_statement
Rule 250   conditionopt -> condition
Rule 251   conditionopt -> <empty>
Rule 252   for_rest_statement -> conditionopt SEMICOLON
Rule 253   for_rest_statement -> conditionopt SEMICOLON expression
Rule 254   jump_statement -> CONTINUE SEMICOLON
Rule 255   jump_statement -> BREAK SEMICOLON
Rule 256   jump_statement -> RETURN SEMICOLON
Rule 257   jump_statement -> RETURN expression SEMICOLON
Rule 258   jump_statement -> DISCARD SEMICOLON
Rule 259   translation_unit -> external_declaration
Rule 260   translation_unit -> translation_unit external_declaration
Rule 261   external_declaration -> function_definition
Rule 262   external_declaration -> declaration
Rule 263   function_definition -> function_prototype compound_statement_no_new_scope

Terminals, with rules where they appear

ADD_ASSIGN           : 75
AMPERSAND            : 56
AND_ASSIGN           : 79
AND_OP               : 62
ATTRIBUTE            : 133
BANG                 : 35
BOOL                 : 150
BOOLCONSTANT         : 7
BREAK                : 255
BVEC2                : 154
BVEC3                : 155
BVEC4                : 156
CARET                : 58
CASE                 : 242
CENTROID             : 135 138 139
COLON                : 68 242 243
COMMA                : 24 83 92 106 107 108 109 110 111 209
COMMENT              : 1
CONST                : 126 132
CONTINUE             : 254
DASH                 : 34 43
DEC_OP               : 14 31
DEFAULT              : 243
DEFINE               : 
DEFINED              : 
DISCARD              : 258
DIV_ASSIGN           : 73
DO                   : 245
DOT                  : 12 18
ELSE                 : 235
ENDIF                : 
EQUAL                : 71 109 110 111 116 118 238
EQ_OP                : 53
FIELD_SELECTION      : 12 28
FLAT                 : 124
FLOAT                : 147
FLOATCONSTANT        : 6
FOR                  : 246
GE_OP                : 51
HIGH_PRECISION       : 200
IDENTIFIER           : 2 27 93 94 95 106 107 108 109 110 111 113 114 115 116 117 118 119 203 210 211 238
IF                   : 234
IFDEF                : 
IN                   : 101 136 138
INC_OP               : 13 30
INOUT                : 103
INT                  : 148
INTCONSTANT          : 4
INVARIANT            : 119 122
ISAMPLER1D           : 186
ISAMPLER1DARRAY      : 190
ISAMPLER2D           : 187
ISAMPLER2DARRAY      : 191
ISAMPLER3D           : 188
ISAMPLERCUBE         : 189
IVEC2                : 157
IVEC3                : 158
IVEC4                : 159
LEFT_ANGLE           : 48
LEFT_ASSIGN          : 77
LEFT_BRACE           : 203 204 224 225 228 229 239
LEFT_BRACKET         : 10 95 107 108 109 110 114 115 116 117 144 145 211
LEFT_OP              : 45
LEFT_PAREN           : 8 25 93 234 239 244 245 246
LE_OP                : 50
LOW_PRECISION        : 202
MAT2                 : 163
MAT2X2               : 166
MAT2X3               : 167
MAT2X4               : 168
MAT3                 : 164
MAT3X2               : 169
MAT3X3               : 170
MAT3X4               : 171
MAT4                 : 165
MAT4X2               : 172
MAT4X3               : 173
MAT4X4               : 174
MEDIUM_PRECISION     : 201
MOD_ASSIGN           : 74
MUL_ASSIGN           : 72
NE_OP                : 54
NOPERSPECTIVE        : 125
OR_ASSIGN            : 81
OR_OP                : 66
OUT                  : 102 137 139
PERCENT              : 40
PLUS                 : 33 42
PRAGMA               : 
PRECISION            : 87
QUESTION             : 68
RETURN               : 256 257
RIGHT_ANGLE          : 49
RIGHT_ASSIGN         : 78
RIGHT_BRACE          : 203 204 224 225 228 229 239
RIGHT_BRACKET        : 10 95 107 108 109 110 114 115 116 144 145 211
RIGHT_OP             : 46
RIGHT_PAREN          : 8 19 20 88 234 239 244 245 246
SAMPLER1D            : 175
SAMPLER1DARRAY       : 182
SAMPLER1DARRAYSHADOW : 184
SAMPLER1DSHADOW      : 179
SAMPLER2D            : 176
SAMPLER2DARRAY       : 183
SAMPLER2DARRAYSHADOW : 185
SAMPLER2DSHADOW      : 180
SAMPLER3D            : 177
SAMPLERCUBE          : 178
SAMPLERCUBESHADOW    : 181
SEMICOLON            : 85 86 87 207 232 233 245 252 253 254 255 256 257 258
SHARP                : 
SLASH                : 39
SMOOTH               : 123
STAR                 : 38
STRUCT               : 203 204
SUB_ASSIGN           : 76
SWITCH               : 239
TILDE                : 36
TYPE_NAME            : 199
UINT                 : 149
UINTCONSTANT         : 5
UNDEF                : 
UNIFORM              : 140
USAMPLER1D           : 192
USAMPLER1DARRAY      : 196
USAMPLER2D           : 193
USAMPLER2DARRAY      : 197
USAMPLER3D           : 194
USAMPLERCUBE         : 195
UVEC2                : 160
UVEC3                : 161
UVEC4                : 162
VARYING              : 134 135
VEC2                 : 151
VEC3                 : 152
VEC4                 : 153
VERSION              : 
VERTICAL_BAR         : 60
VOID                 : 21 146
WHILE                : 244 245
XOR_ASSIGN           : 80
XOR_OP               : 64
error                : 

Nonterminals, with rules where they appear

additive_expression  : 42 43 44 45 46
and_expression       : 56 57 58
assignment_expression : 23 24 68 70 82 83 212
assignment_operator  : 70
case_label           : 221
comment              : 0
compound_statement   : 215
compound_statement_no_new_scope : 226 263
condition            : 244 250
conditional_expression : 69 84
conditionopt         : 252 253
constant_expression  : 95 108 110 115 117 145 211
declaration          : 214 262
declaration_statement : 217 249
equality_expression  : 53 54 55 56
exclusive_or_expression : 58 59 60
expression           : 8 15 68 83 233 234 237 239 242 245 253 257
expression_statement : 218 248
external_declaration : 259 260
for_init_statement   : 246
for_rest_statement   : 246
fully_specified_type : 93 112 113 114 115 116 117 118 238
function_call        : 11
function_call_generic : 17 18
function_call_header : 21 22 23
function_call_header_no_parameters : 20
function_call_header_with_parameters : 19 24
function_call_or_method : 16
function_declarator  : 88
function_definition  : 261
function_header      : 89 91
function_header_with_parameters : 90 92
function_identifier  : 25
function_prototype   : 85 263
inclusive_or_expression : 60 61 62
init_declarator_list : 86 106 107 108 109 110 111
initializer          : 109 110 111 116 118 238
integer_expression   : 10
interpolation_qualifier : 128 130
invariant_qualifier  : 129 130
iteration_statement  : 222
jump_statement       : 223
logical_and_expression : 62 63 64
logical_or_expression : 66 67 68
logical_xor_expression : 64 65 66
multiplicative_expression : 38 39 40 41 42 43
parameter_declaration : 91 92
parameter_declarator : 96 97
parameter_qualifier  : 96 97 98 99
parameter_type_qualifier : 96 98
parameter_type_specifier : 98 99
postfix_expression   : 10 12 13 14 18 29
precision_qualifier  : 87 142
primary_expression   : 9
relational_expression : 48 49 50 51 52 53 54
selection_rest_statement : 234
selection_statement  : 219
shift_expression     : 45 46 47 48 49 50 51
simple_statement     : 216 227
single_declaration   : 105
statement            : 230 231 235 235 236 245
statement_list       : 225 229 231 241
statement_no_new_scope : 244 247
storage_qualifier    : 127
struct_declaration   : 205 206
struct_declaration_list : 203 204 206
struct_declarator    : 208 209
struct_declarator_list : 207 209
struct_specifier     : 198
switch_statement     : 220
switch_statement_list : 239
translation_unit     : 260
type_qualifier       : 121 128 129 130
type_specifier       : 26 94 95 104 120 121 207
type_specifier_no_prec : 87 141 142
type_specifier_nonarray : 143 144 145
unary_expression     : 30 31 32 37 38 39 40 70
unary_operator       : 32
variable_identifier  : 3

Parsing method: LALR

state 0

    (0) S' -> . comment
    (1) comment -> . COMMENT

    COMMENT         shift and go to state 2

    comment                        shift and go to state 1

state 1

    (0) S' -> comment .



state 2

    (1) comment -> COMMENT .

    $end            reduce using rule 1 (comment -> COMMENT .)

