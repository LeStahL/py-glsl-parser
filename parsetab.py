
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLEFT_BRACKETRIGHT_BRACKETLEFT_PARENRIGHT_PARENDOTINC_OPDEC_OPleftSTARSLASHPERCENTleftPLUSDASHleftLEFT_OPRIGHT_OPleftLEFT_ANGLERIGHT_ANGLELE_OPGE_OPleftEQ_OPNE_OPleftAMPERSANDleftCARETleftVERTICAL_BARleftAND_OPleftXOR_OPleftOR_OPrightQUESTIONCOLONrightEQUALADD_ASSIGNSUB_ASSIGNMUL_ASSIGNDIV_ASSIGNMOD_ASSIGNLEFT_ASSIGNRIGHT_ASSIGNAND_ASSIGNXOR_ASSIGNOR_ASSIGNleftCOMMAADD_ASSIGN AMPERSAND AND_ASSIGN AND_OP ATTRIBUTE BANG BOOL BOOLCONSTANT BREAK BVEC2 BVEC3 BVEC4 CARET CASE CENTROID COLON COMMA CONST CONTINUE DASH DEC_OP DEFAULT DISCARD DIV_ASSIGN DO DOT ELSE EQUAL EQ_OP FIELD_SELECTION FLAT FLOAT FLOATCONSTANT FOR GE_OP HIGH_PRECISION IDENTIFIER IF IN INC_OP INOUT INT INTCONSTANT INVARIANT ISAMPLER1D ISAMPLER1DARRAY ISAMPLER2D ISAMPLER2DARRAY ISAMPLER3D ISAMPLERCUBE IVEC2 IVEC3 IVEC4 LEFT_ANGLE LEFT_ASSIGN LEFT_BRACE LEFT_BRACKET LEFT_OP LEFT_PAREN LE_OP LOW_PRECISION MAT2 MAT2X2 MAT2X3 MAT2X4 MAT3 MAT3X2 MAT3X3 MAT3X4 MAT4 MAT4X2 MAT4X3 MAT4X4 MEDIUM_PRECISION MOD_ASSIGN MUL_ASSIGN NE_OP NOPERSPECTIVE OR_ASSIGN OR_OP OUT PERCENT PLUS PRECISION QUESTION RETURN RIGHT_ANGLE RIGHT_ASSIGN RIGHT_BRACE RIGHT_BRACKET RIGHT_OP RIGHT_PAREN SAMPLER1D SAMPLER1DARRAY SAMPLER1DARRAYSHADOW SAMPLER1DSHADOW SAMPLER2D SAMPLER2DARRAY SAMPLER2DARRAYSHADOW SAMPLER2DSHADOW SAMPLER3D SAMPLERCUBE SAMPLERCUBESHADOW SEMICOLON SLASH SMOOTH STAR STRUCT SUB_ASSIGN SWITCH TILDE TYPE_NAME UINT UINTCONSTANT UNIFORM USAMPLER1D USAMPLER1DARRAY USAMPLER2D USAMPLER2DARRAY USAMPLER3D USAMPLERCUBE UVEC2 UVEC3 UVEC4 VARYING VEC2 VEC3 VEC4 VERTICAL_BAR VOID WHILE XOR_ASSIGN XOR_OPvariable_identifier : IDENTIFIERprimary_expression : variable_identifier \n    | INTCONSTANT \n    | UINTCONSTANT \n    | FLOATCONSTANT \n    | BOOLCONSTANT \n    | LEFT_PAREN expression RIGHT_PARENpostfix_expression : primary_expression \n    | postfix_expression LEFT_BRACKET integer_expression RIGHT_BRACKET \n    | function_call \n    | postfix_expression DOT FIELD_SELECTION \n    | postfix_expression INC_OP \n    | postfix_expression DEC_OPinteger_expression : expressionfunction_call : function_call_or_methodfunction_call_or_method : function_call_generic \n    | postfix_expression DOT function_call_genericfunction_call_generic : function_call_header_with_parameters RIGHT_PAREN \n    | function_call_header_no_parameters RIGHT_PARENfunction_call_header_no_parameters : function_call_header VOID \n    | function_call_headerfunction_call_header_with_parameters : function_call_header assignment_expression \n    | function_call_header_with_parameters COMMA assignment_expressionfunction_call_header : function_identifier LEFT_PARENfunction_identifier : type_specifier \n    | IDENTIFIER \n    | FIELD_SELECTIONunary_expression : postfix_expression \n    | INC_OP unary_expression \n    | DEC_OP unary_expression \n    | unary_operator unary_expressionunary_operator : PLUS \n    | DASH \n    | BANG \n    | TILDEmultiplicative_expression : unary_expression \n    | multiplicative_expression STAR unary_expression \n    | multiplicative_expression SLASH unary_expression \n    |  multiplicative_expression PERCENT unary_expressionadditive_expression : multiplicative_expression \n    | additive_expression PLUS multiplicative_expression \n    | additive_expression DASH multiplicative_expressionshift_expression : additive_expression \n    | shift_expression LEFT_OP additive_expression \n    | shift_expression RIGHT_OP additive_expressionrelational_expression : shift_expression \n    | relational_expression LEFT_ANGLE shift_expression \n    | relational_expression RIGHT_ANGLE shift_expression \n    |  relational_expression LE_OP shift_expression \n    | relational_expression GE_OP shift_expressionequality_expression : relational_expression \n    | equality_expression EQ_OP relational_expression \n    | equality_expression NE_OP relational_expressionand_expression : equality_expression \n    | and_expression AMPERSAND equality_expressionexclusive_or_expression : and_expression \n    | exclusive_or_expression CARET and_expressioninclusive_or_expression : exclusive_or_expression \n    | inclusive_or_expression VERTICAL_BAR exclusive_or_expressionlogical_and_expression : inclusive_or_expression \n    | logical_and_expression AND_OP inclusive_or_expressionlogical_xor_expression : logical_and_expression \n    | logical_xor_expression XOR_OP logical_and_expressionlogical_or_expression : logical_xor_expression \n    | logical_or_expression OR_OP logical_xor_expressionconditional_expression : logical_or_expression \n    | logical_or_expression QUESTION expression COLON assignment_expressionassignment_expression : conditional_expression \n    | unary_expression assignment_operator assignment_expressionassignment_operator : EQUAL \n    | MUL_ASSIGN \n    | DIV_ASSIGN \n    | MOD_ASSIGN \n    | ADD_ASSIGN \n    | SUB_ASSIGN \n    | LEFT_ASSIGN \n    | RIGHT_ASSIGN \n    | AND_ASSIGN \n    | XOR_ASSIGN \n    | OR_ASSIGNexpression : assignment_expression \n    | expression COMMA assignment_expressionconstant_expression : conditional_expressiondeclaration : function_prototype SEMICOLON \n    | init_declarator_list SEMICOLON \n    | PRECISION precision_qualifier type_specifier_no_prec SEMICOLONfunction_prototype : function_declarator RIGHT_PARENfunction_declarator : function_header \n    | function_header_with_parametersfunction_header_with_parameters : function_header parameter_declaration \n    | function_header_with_parameters COMMA parameter_declarationfunction_header : fully_specified_type IDENTIFIER LEFT_PARENparameter_declarator : type_specifier IDENTIFIER \n    | type_specifier IDENTIFIER LEFT_BRACKET constant_expression RIGHT_BRACKETparameter_declaration : parameter_type_qualifier parameter_qualifier parameter_declarator \n    | parameter_qualifier parameter_declarator \n    | parameter_type_qualifier parameter_qualifier parameter_type_specifier \n    | parameter_qualifier parameter_type_specifierparameter_qualifier : \n    | IN \n    | OUT \n    | INOUTparameter_type_specifier : type_specifierinit_declarator_list : single_declaration \n    | init_declarator_list COMMA IDENTIFIER \n    | init_declarator_list COMMA IDENTIFIER LEFT_BRACKET  RIGHT_BRACKET \n    | init_declarator_list COMMA IDENTIFIER LEFT_BRACKET constant_expression RIGHT_BRACKET \n    | init_declarator_list COMMA IDENTIFIER LEFT_BRACKET RIGHT_BRACKET EQUAL initializer \n    | init_declarator_list COMMA IDENTIFIER LEFT_BRACKET constant_expression RIGHT_BRACKET EQUAL initializer \n    | init_declarator_list COMMA IDENTIFIER EQUAL initializersingle_declaration : fully_specified_type \n    | fully_specified_type IDENTIFIER \n    | fully_specified_type IDENTIFIER LEFT_BRACKET  RIGHT_BRACKET \n    | fully_specified_type IDENTIFIER LEFT_BRACKET constant_expression RIGHT_BRACKET \n    | fully_specified_type IDENTIFIER LEFT_BRACKET RIGHT_BRACKET EQUAL initializer \n    | fully_specified_type IDENTIFIER LEFT_BRACKET constant_expression \n    | fully_specified_type IDENTIFIER EQUAL initializer \n    | INVARIANT IDENTIFIERfully_specified_type : type_specifier \n    | type_qualifier type_specifierinvariant_qualifier : INVARIANTinterpolation_qualifier : SMOOTH \n    | FLAT \n    | NOPERSPECTIVEparameter_type_qualifier : CONSTtype_qualifier : storage_qualifier \n    | interpolation_qualifier type_qualifier \n    | invariant_qualifier type_qualifier \n    | invariant_qualifier interpolation_qualifier type_qualifierstorage_qualifier : \n    | CONST \n    | ATTRIBUTE \n    | VARYING \n    | CENTROID VARYING \n    | IN \n    | OUT \n    | CENTROID IN \n    | CENTROID OUT \n    | UNIFORMtype_specifier : type_specifier_no_prec \n    | precision_qualifier type_specifier_no_prectype_specifier_no_prec : type_specifier_nonarray \n    | type_specifier_nonarray LEFT_BRACKET RIGHT_BRACKET \n    | type_specifier_nonarray LEFT_BRACKET constant_expression RIGHT_BRACKETtype_specifier_nonarray : VOID \n    | FLOAT \n    | INT \n    | UINT \n    | BOOL \n    | VEC2 \n    | VEC3 \n    | VEC4 \n    | BVEC2 \n    | BVEC3 \n    | BVEC4 \n    | IVEC2 \n    | IVEC3 \n    | IVEC4 \n    | UVEC2 \n    | UVEC3 \n    | UVEC4 \n    | MAT2 \n    | MAT3 \n    | MAT4 \n    | MAT2X2 \n    | MAT2X3 \n    | MAT2X4 \n    | MAT3X2 \n    | MAT3X3 \n    | MAT3X4 \n    | MAT4X2 \n    | MAT4X3 \n    | MAT4X4 \n    | SAMPLER1D \n    | SAMPLER2D \n    | SAMPLER3D \n    | SAMPLERCUBE \n    | SAMPLER1DSHADOW \n    | SAMPLER2DSHADOW \n    | SAMPLERCUBESHADOW \n    | SAMPLER1DARRAY \n    | SAMPLER2DARRAY \n    | SAMPLER1DARRAYSHADOW \n    | SAMPLER2DARRAYSHADOW \n    | ISAMPLER1D \n    | ISAMPLER2D \n    | ISAMPLER3D \n    | ISAMPLERCUBE \n    | ISAMPLER1DARRAY \n    | ISAMPLER2DARRAY \n    | USAMPLER1D \n    | USAMPLER2D \n    | USAMPLER3D \n    | USAMPLERCUBE \n    | USAMPLER1DARRAY \n    | USAMPLER2DARRAY \n    | struct_specifier \n    | TYPE_NAMEprecision_qualifier : HIGH_PRECISION \n    | MEDIUM_PRECISION \n    | LOW_PRECISIONstruct_specifier : STRUCT IDENTIFIER LEFT_BRACE struct_declaration_list RIGHT_BRACE \n    | STRUCT LEFT_BRACE struct_declaration_list RIGHT_BRACEstruct_declaration_list : struct_declaration \n    | struct_declaration_list struct_declarationstruct_declaration : type_specifier struct_declarator_list SEMICOLONstruct_declarator_list : struct_declarator \n    | struct_declarator_list COMMA struct_declaratorstruct_declarator : IDENTIFIER \n    | IDENTIFIER LEFT_BRACKET constant_expression RIGHT_BRACKETinitializer : assignment_expressiondeclaration_statement : \n    | declarationstatement : compound_statement \n    | simple_statementsimple_statement : declaration_statement \n    | expression_statement \n    | selection_statement \n    | switch_statement \n    | case_label \n    | iteration_statement \n    | jump_statementcompound_statement : LEFT_BRACE RIGHT_BRACE \n    | LEFT_BRACE statement_list RIGHT_BRACEstatement_no_new_scope : compound_statement_no_new_scope \n    | simple_statementcompound_statement_no_new_scope : LEFT_BRACE RIGHT_BRACE \n    | LEFT_BRACE statement_list RIGHT_BRACEstatement_list : statement \n    | statement_list statementexpression_statement : SEMICOLON \n    | expression SEMICOLONselection_statement : IF LEFT_PAREN expression RIGHT_PAREN selection_rest_statementselection_rest_statement : statement ELSE statement \n    | statementcondition : expression \n    | fully_specified_type IDENTIFIER EQUAL initializerswitch_statement : SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_BRACE switch_statement_list RIGHT_BRACEswitch_statement_list : \n    | statement_listcase_label : CASE expression COLON \n    | DEFAULT COLONiteration_statement : WHILE LEFT_PAREN condition RIGHT_PAREN statement_no_new_scope \n    | DO statement WHILE LEFT_PAREN expression RIGHT_PAREN SEMICOLON \n    | FOR LEFT_PAREN for_init_statement for_rest_statement RIGHT_PAREN \n    | statement_no_new_scopefor_init_statement : expression_statement \n    | declaration_statementconditionopt : condition \n    | for_rest_statement : conditionopt SEMICOLON \n    | conditionopt SEMICOLON expressionjump_statement : CONTINUE SEMICOLON \n    | BREAK SEMICOLON \n    | RETURN SEMICOLON \n    | RETURN expression SEMICOLON \n    | DISCARD SEMICOLON translation_unit : external_declaration \n    | translation_unit external_declarationexternal_declaration : function_definition \n    | declarationfunction_definition : function_prototype compound_statement_no_new_scope'
    
_lr_action_items = {'IDENTIFIER':([0,],[2,]),'$end':([1,2,],[0,-1,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'variable_identifier':([0,],[1,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> variable_identifier","S'",1,None,None,None),
  ('variable_identifier -> IDENTIFIER','variable_identifier',1,'p_variable_identifier','Parser130.py',205),
  ('primary_expression -> variable_identifier','primary_expression',1,'p_primary_expression','Parser130.py',211),
  ('primary_expression -> INTCONSTANT','primary_expression',1,'p_primary_expression','Parser130.py',212),
  ('primary_expression -> UINTCONSTANT','primary_expression',1,'p_primary_expression','Parser130.py',213),
  ('primary_expression -> FLOATCONSTANT','primary_expression',1,'p_primary_expression','Parser130.py',214),
  ('primary_expression -> BOOLCONSTANT','primary_expression',1,'p_primary_expression','Parser130.py',215),
  ('primary_expression -> LEFT_PAREN expression RIGHT_PAREN','primary_expression',3,'p_primary_expression','Parser130.py',216),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','Parser130.py',220),
  ('postfix_expression -> postfix_expression LEFT_BRACKET integer_expression RIGHT_BRACKET','postfix_expression',4,'p_postfix_expression','Parser130.py',221),
  ('postfix_expression -> function_call','postfix_expression',1,'p_postfix_expression','Parser130.py',222),
  ('postfix_expression -> postfix_expression DOT FIELD_SELECTION','postfix_expression',3,'p_postfix_expression','Parser130.py',223),
  ('postfix_expression -> postfix_expression INC_OP','postfix_expression',2,'p_postfix_expression','Parser130.py',224),
  ('postfix_expression -> postfix_expression DEC_OP','postfix_expression',2,'p_postfix_expression','Parser130.py',225),
  ('integer_expression -> expression','integer_expression',1,'p_integer_expression','Parser130.py',229),
  ('function_call -> function_call_or_method','function_call',1,'p_function_call','Parser130.py',233),
  ('function_call_or_method -> function_call_generic','function_call_or_method',1,'p_function_call_or_method','Parser130.py',237),
  ('function_call_or_method -> postfix_expression DOT function_call_generic','function_call_or_method',3,'p_function_call_or_method','Parser130.py',238),
  ('function_call_generic -> function_call_header_with_parameters RIGHT_PAREN','function_call_generic',2,'p_function_call_generic','Parser130.py',242),
  ('function_call_generic -> function_call_header_no_parameters RIGHT_PAREN','function_call_generic',2,'p_function_call_generic','Parser130.py',243),
  ('function_call_header_no_parameters -> function_call_header VOID','function_call_header_no_parameters',2,'p_function_call_header_no_parameters','Parser130.py',247),
  ('function_call_header_no_parameters -> function_call_header','function_call_header_no_parameters',1,'p_function_call_header_no_parameters','Parser130.py',248),
  ('function_call_header_with_parameters -> function_call_header assignment_expression','function_call_header_with_parameters',2,'p_function_call_header_with_parameters','Parser130.py',252),
  ('function_call_header_with_parameters -> function_call_header_with_parameters COMMA assignment_expression','function_call_header_with_parameters',3,'p_function_call_header_with_parameters','Parser130.py',253),
  ('function_call_header -> function_identifier LEFT_PAREN','function_call_header',2,'p_function_call_header','Parser130.py',257),
  ('function_identifier -> type_specifier','function_identifier',1,'p_function_identifier','Parser130.py',263),
  ('function_identifier -> IDENTIFIER','function_identifier',1,'p_function_identifier','Parser130.py',264),
  ('function_identifier -> FIELD_SELECTION','function_identifier',1,'p_function_identifier','Parser130.py',265),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','Parser130.py',269),
  ('unary_expression -> INC_OP unary_expression','unary_expression',2,'p_unary_expression','Parser130.py',270),
  ('unary_expression -> DEC_OP unary_expression','unary_expression',2,'p_unary_expression','Parser130.py',271),
  ('unary_expression -> unary_operator unary_expression','unary_expression',2,'p_unary_expression','Parser130.py',272),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','Parser130.py',277),
  ('unary_operator -> DASH','unary_operator',1,'p_unary_operator','Parser130.py',278),
  ('unary_operator -> BANG','unary_operator',1,'p_unary_operator','Parser130.py',279),
  ('unary_operator -> TILDE','unary_operator',1,'p_unary_operator','Parser130.py',280),
  ('multiplicative_expression -> unary_expression','multiplicative_expression',1,'p_multiplicative_expression','Parser130.py',285),
  ('multiplicative_expression -> multiplicative_expression STAR unary_expression','multiplicative_expression',3,'p_multiplicative_expression','Parser130.py',286),
  ('multiplicative_expression -> multiplicative_expression SLASH unary_expression','multiplicative_expression',3,'p_multiplicative_expression','Parser130.py',287),
  ('multiplicative_expression -> multiplicative_expression PERCENT unary_expression','multiplicative_expression',3,'p_multiplicative_expression','Parser130.py',288),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','Parser130.py',292),
  ('additive_expression -> additive_expression PLUS multiplicative_expression','additive_expression',3,'p_additive_expression','Parser130.py',293),
  ('additive_expression -> additive_expression DASH multiplicative_expression','additive_expression',3,'p_additive_expression','Parser130.py',294),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','Parser130.py',298),
  ('shift_expression -> shift_expression LEFT_OP additive_expression','shift_expression',3,'p_shift_expression','Parser130.py',299),
  ('shift_expression -> shift_expression RIGHT_OP additive_expression','shift_expression',3,'p_shift_expression','Parser130.py',300),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','Parser130.py',304),
  ('relational_expression -> relational_expression LEFT_ANGLE shift_expression','relational_expression',3,'p_relational_expression','Parser130.py',305),
  ('relational_expression -> relational_expression RIGHT_ANGLE shift_expression','relational_expression',3,'p_relational_expression','Parser130.py',306),
  ('relational_expression -> relational_expression LE_OP shift_expression','relational_expression',3,'p_relational_expression','Parser130.py',307),
  ('relational_expression -> relational_expression GE_OP shift_expression','relational_expression',3,'p_relational_expression','Parser130.py',308),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','Parser130.py',312),
  ('equality_expression -> equality_expression EQ_OP relational_expression','equality_expression',3,'p_equality_expression','Parser130.py',313),
  ('equality_expression -> equality_expression NE_OP relational_expression','equality_expression',3,'p_equality_expression','Parser130.py',314),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','Parser130.py',318),
  ('and_expression -> and_expression AMPERSAND equality_expression','and_expression',3,'p_and_expression','Parser130.py',319),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','Parser130.py',323),
  ('exclusive_or_expression -> exclusive_or_expression CARET and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','Parser130.py',324),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','Parser130.py',328),
  ('inclusive_or_expression -> inclusive_or_expression VERTICAL_BAR exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','Parser130.py',329),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','Parser130.py',333),
  ('logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','Parser130.py',334),
  ('logical_xor_expression -> logical_and_expression','logical_xor_expression',1,'p_logical_xor_expression','Parser130.py',338),
  ('logical_xor_expression -> logical_xor_expression XOR_OP logical_and_expression','logical_xor_expression',3,'p_logical_xor_expression','Parser130.py',339),
  ('logical_or_expression -> logical_xor_expression','logical_or_expression',1,'p_logical_or_expression','Parser130.py',343),
  ('logical_or_expression -> logical_or_expression OR_OP logical_xor_expression','logical_or_expression',3,'p_logical_or_expression','Parser130.py',344),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','Parser130.py',348),
  ('conditional_expression -> logical_or_expression QUESTION expression COLON assignment_expression','conditional_expression',5,'p_conditional_expression','Parser130.py',349),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','Parser130.py',353),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','Parser130.py',354),
  ('assignment_operator -> EQUAL','assignment_operator',1,'p_assignment_operator','Parser130.py',358),
  ('assignment_operator -> MUL_ASSIGN','assignment_operator',1,'p_assignment_operator','Parser130.py',359),
  ('assignment_operator -> DIV_ASSIGN','assignment_operator',1,'p_assignment_operator','Parser130.py',360),
  ('assignment_operator -> MOD_ASSIGN','assignment_operator',1,'p_assignment_operator','Parser130.py',361),
  ('assignment_operator -> ADD_ASSIGN','assignment_operator',1,'p_assignment_operator','Parser130.py',362),
  ('assignment_operator -> SUB_ASSIGN','assignment_operator',1,'p_assignment_operator','Parser130.py',363),
  ('assignment_operator -> LEFT_ASSIGN','assignment_operator',1,'p_assignment_operator','Parser130.py',364),
  ('assignment_operator -> RIGHT_ASSIGN','assignment_operator',1,'p_assignment_operator','Parser130.py',365),
  ('assignment_operator -> AND_ASSIGN','assignment_operator',1,'p_assignment_operator','Parser130.py',366),
  ('assignment_operator -> XOR_ASSIGN','assignment_operator',1,'p_assignment_operator','Parser130.py',367),
  ('assignment_operator -> OR_ASSIGN','assignment_operator',1,'p_assignment_operator','Parser130.py',368),
  ('expression -> assignment_expression','expression',1,'p_expression','Parser130.py',372),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','Parser130.py',373),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','Parser130.py',377),
  ('declaration -> function_prototype SEMICOLON','declaration',2,'p_declaration','Parser130.py',381),
  ('declaration -> init_declarator_list SEMICOLON','declaration',2,'p_declaration','Parser130.py',382),
  ('declaration -> PRECISION precision_qualifier type_specifier_no_prec SEMICOLON','declaration',4,'p_declaration','Parser130.py',383),
  ('function_prototype -> function_declarator RIGHT_PAREN','function_prototype',2,'p_function_prototype','Parser130.py',387),
  ('function_declarator -> function_header','function_declarator',1,'p_function_declarator','Parser130.py',391),
  ('function_declarator -> function_header_with_parameters','function_declarator',1,'p_function_declarator','Parser130.py',392),
  ('function_header_with_parameters -> function_header parameter_declaration','function_header_with_parameters',2,'p_function_header_with_parameters','Parser130.py',396),
  ('function_header_with_parameters -> function_header_with_parameters COMMA parameter_declaration','function_header_with_parameters',3,'p_function_header_with_parameters','Parser130.py',397),
  ('function_header -> fully_specified_type IDENTIFIER LEFT_PAREN','function_header',3,'p_function_header','Parser130.py',401),
  ('parameter_declarator -> type_specifier IDENTIFIER','parameter_declarator',2,'p_parameter_declarator','Parser130.py',405),
  ('parameter_declarator -> type_specifier IDENTIFIER LEFT_BRACKET constant_expression RIGHT_BRACKET','parameter_declarator',5,'p_parameter_declarator','Parser130.py',406),
  ('parameter_declaration -> parameter_type_qualifier parameter_qualifier parameter_declarator','parameter_declaration',3,'p_parameter_declaration','Parser130.py',410),
  ('parameter_declaration -> parameter_qualifier parameter_declarator','parameter_declaration',2,'p_parameter_declaration','Parser130.py',411),
  ('parameter_declaration -> parameter_type_qualifier parameter_qualifier parameter_type_specifier','parameter_declaration',3,'p_parameter_declaration','Parser130.py',412),
  ('parameter_declaration -> parameter_qualifier parameter_type_specifier','parameter_declaration',2,'p_parameter_declaration','Parser130.py',413),
  ('parameter_qualifier -> <empty>','parameter_qualifier',0,'p_parameter_qualifier','Parser130.py',417),
  ('parameter_qualifier -> IN','parameter_qualifier',1,'p_parameter_qualifier','Parser130.py',418),
  ('parameter_qualifier -> OUT','parameter_qualifier',1,'p_parameter_qualifier','Parser130.py',419),
  ('parameter_qualifier -> INOUT','parameter_qualifier',1,'p_parameter_qualifier','Parser130.py',420),
  ('parameter_type_specifier -> type_specifier','parameter_type_specifier',1,'p_parameter_type_specifier','Parser130.py',424),
  ('init_declarator_list -> single_declaration','init_declarator_list',1,'p_init_declarator_list','Parser130.py',428),
  ('init_declarator_list -> init_declarator_list COMMA IDENTIFIER','init_declarator_list',3,'p_init_declarator_list','Parser130.py',429),
  ('init_declarator_list -> init_declarator_list COMMA IDENTIFIER LEFT_BRACKET RIGHT_BRACKET','init_declarator_list',5,'p_init_declarator_list','Parser130.py',430),
  ('init_declarator_list -> init_declarator_list COMMA IDENTIFIER LEFT_BRACKET constant_expression RIGHT_BRACKET','init_declarator_list',6,'p_init_declarator_list','Parser130.py',431),
  ('init_declarator_list -> init_declarator_list COMMA IDENTIFIER LEFT_BRACKET RIGHT_BRACKET EQUAL initializer','init_declarator_list',7,'p_init_declarator_list','Parser130.py',432),
  ('init_declarator_list -> init_declarator_list COMMA IDENTIFIER LEFT_BRACKET constant_expression RIGHT_BRACKET EQUAL initializer','init_declarator_list',8,'p_init_declarator_list','Parser130.py',433),
  ('init_declarator_list -> init_declarator_list COMMA IDENTIFIER EQUAL initializer','init_declarator_list',5,'p_init_declarator_list','Parser130.py',434),
  ('single_declaration -> fully_specified_type','single_declaration',1,'p_single_declaration','Parser130.py',438),
  ('single_declaration -> fully_specified_type IDENTIFIER','single_declaration',2,'p_single_declaration','Parser130.py',439),
  ('single_declaration -> fully_specified_type IDENTIFIER LEFT_BRACKET RIGHT_BRACKET','single_declaration',4,'p_single_declaration','Parser130.py',440),
  ('single_declaration -> fully_specified_type IDENTIFIER LEFT_BRACKET constant_expression RIGHT_BRACKET','single_declaration',5,'p_single_declaration','Parser130.py',441),
  ('single_declaration -> fully_specified_type IDENTIFIER LEFT_BRACKET RIGHT_BRACKET EQUAL initializer','single_declaration',6,'p_single_declaration','Parser130.py',442),
  ('single_declaration -> fully_specified_type IDENTIFIER LEFT_BRACKET constant_expression','single_declaration',4,'p_single_declaration','Parser130.py',443),
  ('single_declaration -> fully_specified_type IDENTIFIER EQUAL initializer','single_declaration',4,'p_single_declaration','Parser130.py',444),
  ('single_declaration -> INVARIANT IDENTIFIER','single_declaration',2,'p_single_declaration','Parser130.py',445),
  ('fully_specified_type -> type_specifier','fully_specified_type',1,'p_fully_specified_type','Parser130.py',450),
  ('fully_specified_type -> type_qualifier type_specifier','fully_specified_type',2,'p_fully_specified_type','Parser130.py',451),
  ('invariant_qualifier -> INVARIANT','invariant_qualifier',1,'p_invariant_qualifier','Parser130.py',455),
  ('interpolation_qualifier -> SMOOTH','interpolation_qualifier',1,'p_interpolation_qualifier','Parser130.py',459),
  ('interpolation_qualifier -> FLAT','interpolation_qualifier',1,'p_interpolation_qualifier','Parser130.py',460),
  ('interpolation_qualifier -> NOPERSPECTIVE','interpolation_qualifier',1,'p_interpolation_qualifier','Parser130.py',461),
  ('parameter_type_qualifier -> CONST','parameter_type_qualifier',1,'p_parameter_type_qualifier','Parser130.py',465),
  ('type_qualifier -> storage_qualifier','type_qualifier',1,'p_type_qualifier','Parser130.py',469),
  ('type_qualifier -> interpolation_qualifier type_qualifier','type_qualifier',2,'p_type_qualifier','Parser130.py',470),
  ('type_qualifier -> invariant_qualifier type_qualifier','type_qualifier',2,'p_type_qualifier','Parser130.py',471),
  ('type_qualifier -> invariant_qualifier interpolation_qualifier type_qualifier','type_qualifier',3,'p_type_qualifier','Parser130.py',472),
  ('storage_qualifier -> <empty>','storage_qualifier',0,'p_storage_qualifier','Parser130.py',476),
  ('storage_qualifier -> CONST','storage_qualifier',1,'p_storage_qualifier','Parser130.py',477),
  ('storage_qualifier -> ATTRIBUTE','storage_qualifier',1,'p_storage_qualifier','Parser130.py',478),
  ('storage_qualifier -> VARYING','storage_qualifier',1,'p_storage_qualifier','Parser130.py',479),
  ('storage_qualifier -> CENTROID VARYING','storage_qualifier',2,'p_storage_qualifier','Parser130.py',480),
  ('storage_qualifier -> IN','storage_qualifier',1,'p_storage_qualifier','Parser130.py',481),
  ('storage_qualifier -> OUT','storage_qualifier',1,'p_storage_qualifier','Parser130.py',482),
  ('storage_qualifier -> CENTROID IN','storage_qualifier',2,'p_storage_qualifier','Parser130.py',483),
  ('storage_qualifier -> CENTROID OUT','storage_qualifier',2,'p_storage_qualifier','Parser130.py',484),
  ('storage_qualifier -> UNIFORM','storage_qualifier',1,'p_storage_qualifier','Parser130.py',485),
  ('type_specifier -> type_specifier_no_prec','type_specifier',1,'p_type_specifier','Parser130.py',489),
  ('type_specifier -> precision_qualifier type_specifier_no_prec','type_specifier',2,'p_type_specifier','Parser130.py',490),
  ('type_specifier_no_prec -> type_specifier_nonarray','type_specifier_no_prec',1,'p_type_specifier_no_prec','Parser130.py',494),
  ('type_specifier_no_prec -> type_specifier_nonarray LEFT_BRACKET RIGHT_BRACKET','type_specifier_no_prec',3,'p_type_specifier_no_prec','Parser130.py',495),
  ('type_specifier_no_prec -> type_specifier_nonarray LEFT_BRACKET constant_expression RIGHT_BRACKET','type_specifier_no_prec',4,'p_type_specifier_no_prec','Parser130.py',496),
  ('type_specifier_nonarray -> VOID','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',500),
  ('type_specifier_nonarray -> FLOAT','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',501),
  ('type_specifier_nonarray -> INT','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',502),
  ('type_specifier_nonarray -> UINT','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',503),
  ('type_specifier_nonarray -> BOOL','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',504),
  ('type_specifier_nonarray -> VEC2','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',505),
  ('type_specifier_nonarray -> VEC3','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',506),
  ('type_specifier_nonarray -> VEC4','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',507),
  ('type_specifier_nonarray -> BVEC2','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',508),
  ('type_specifier_nonarray -> BVEC3','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',509),
  ('type_specifier_nonarray -> BVEC4','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',510),
  ('type_specifier_nonarray -> IVEC2','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',511),
  ('type_specifier_nonarray -> IVEC3','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',512),
  ('type_specifier_nonarray -> IVEC4','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',513),
  ('type_specifier_nonarray -> UVEC2','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',514),
  ('type_specifier_nonarray -> UVEC3','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',515),
  ('type_specifier_nonarray -> UVEC4','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',516),
  ('type_specifier_nonarray -> MAT2','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',517),
  ('type_specifier_nonarray -> MAT3','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',518),
  ('type_specifier_nonarray -> MAT4','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',519),
  ('type_specifier_nonarray -> MAT2X2','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',520),
  ('type_specifier_nonarray -> MAT2X3','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',521),
  ('type_specifier_nonarray -> MAT2X4','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',522),
  ('type_specifier_nonarray -> MAT3X2','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',523),
  ('type_specifier_nonarray -> MAT3X3','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',524),
  ('type_specifier_nonarray -> MAT3X4','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',525),
  ('type_specifier_nonarray -> MAT4X2','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',526),
  ('type_specifier_nonarray -> MAT4X3','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',527),
  ('type_specifier_nonarray -> MAT4X4','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',528),
  ('type_specifier_nonarray -> SAMPLER1D','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',529),
  ('type_specifier_nonarray -> SAMPLER2D','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',530),
  ('type_specifier_nonarray -> SAMPLER3D','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',531),
  ('type_specifier_nonarray -> SAMPLERCUBE','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',532),
  ('type_specifier_nonarray -> SAMPLER1DSHADOW','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',533),
  ('type_specifier_nonarray -> SAMPLER2DSHADOW','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',534),
  ('type_specifier_nonarray -> SAMPLERCUBESHADOW','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',535),
  ('type_specifier_nonarray -> SAMPLER1DARRAY','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',536),
  ('type_specifier_nonarray -> SAMPLER2DARRAY','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',537),
  ('type_specifier_nonarray -> SAMPLER1DARRAYSHADOW','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',538),
  ('type_specifier_nonarray -> SAMPLER2DARRAYSHADOW','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',539),
  ('type_specifier_nonarray -> ISAMPLER1D','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',540),
  ('type_specifier_nonarray -> ISAMPLER2D','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',541),
  ('type_specifier_nonarray -> ISAMPLER3D','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',542),
  ('type_specifier_nonarray -> ISAMPLERCUBE','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',543),
  ('type_specifier_nonarray -> ISAMPLER1DARRAY','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',544),
  ('type_specifier_nonarray -> ISAMPLER2DARRAY','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',545),
  ('type_specifier_nonarray -> USAMPLER1D','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',546),
  ('type_specifier_nonarray -> USAMPLER2D','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',547),
  ('type_specifier_nonarray -> USAMPLER3D','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',548),
  ('type_specifier_nonarray -> USAMPLERCUBE','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',549),
  ('type_specifier_nonarray -> USAMPLER1DARRAY','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',550),
  ('type_specifier_nonarray -> USAMPLER2DARRAY','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',551),
  ('type_specifier_nonarray -> struct_specifier','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',552),
  ('type_specifier_nonarray -> TYPE_NAME','type_specifier_nonarray',1,'p_type_specifier_noarray','Parser130.py',553),
  ('precision_qualifier -> HIGH_PRECISION','precision_qualifier',1,'p_precision_qualifier','Parser130.py',557),
  ('precision_qualifier -> MEDIUM_PRECISION','precision_qualifier',1,'p_precision_qualifier','Parser130.py',558),
  ('precision_qualifier -> LOW_PRECISION','precision_qualifier',1,'p_precision_qualifier','Parser130.py',559),
  ('struct_specifier -> STRUCT IDENTIFIER LEFT_BRACE struct_declaration_list RIGHT_BRACE','struct_specifier',5,'p_struct_specifier','Parser130.py',563),
  ('struct_specifier -> STRUCT LEFT_BRACE struct_declaration_list RIGHT_BRACE','struct_specifier',4,'p_struct_specifier','Parser130.py',564),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','Parser130.py',568),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','Parser130.py',569),
  ('struct_declaration -> type_specifier struct_declarator_list SEMICOLON','struct_declaration',3,'p_struct_declaration','Parser130.py',573),
  ('struct_declarator_list -> struct_declarator','struct_declarator_list',1,'p_struct_declarator_list','Parser130.py',577),
  ('struct_declarator_list -> struct_declarator_list COMMA struct_declarator','struct_declarator_list',3,'p_struct_declarator_list','Parser130.py',578),
  ('struct_declarator -> IDENTIFIER','struct_declarator',1,'p_struct_declarator','Parser130.py',582),
  ('struct_declarator -> IDENTIFIER LEFT_BRACKET constant_expression RIGHT_BRACKET','struct_declarator',4,'p_struct_declarator','Parser130.py',583),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','Parser130.py',587),
  ('declaration_statement -> <empty>','declaration_statement',0,'p_declaration_statement','Parser130.py',591),
  ('declaration_statement -> declaration','declaration_statement',1,'p_declaration_statement','Parser130.py',592),
  ('statement -> compound_statement','statement',1,'p_statement','Parser130.py',596),
  ('statement -> simple_statement','statement',1,'p_statement','Parser130.py',597),
  ('simple_statement -> declaration_statement','simple_statement',1,'p_simple_statement','Parser130.py',602),
  ('simple_statement -> expression_statement','simple_statement',1,'p_simple_statement','Parser130.py',603),
  ('simple_statement -> selection_statement','simple_statement',1,'p_simple_statement','Parser130.py',604),
  ('simple_statement -> switch_statement','simple_statement',1,'p_simple_statement','Parser130.py',605),
  ('simple_statement -> case_label','simple_statement',1,'p_simple_statement','Parser130.py',606),
  ('simple_statement -> iteration_statement','simple_statement',1,'p_simple_statement','Parser130.py',607),
  ('simple_statement -> jump_statement','simple_statement',1,'p_simple_statement','Parser130.py',608),
  ('compound_statement -> LEFT_BRACE RIGHT_BRACE','compound_statement',2,'p_compound_statement','Parser130.py',612),
  ('compound_statement -> LEFT_BRACE statement_list RIGHT_BRACE','compound_statement',3,'p_compound_statement','Parser130.py',613),
  ('statement_no_new_scope -> compound_statement_no_new_scope','statement_no_new_scope',1,'p_statement_no_new_scope','Parser130.py',617),
  ('statement_no_new_scope -> simple_statement','statement_no_new_scope',1,'p_statement_no_new_scope','Parser130.py',618),
  ('compound_statement_no_new_scope -> LEFT_BRACE RIGHT_BRACE','compound_statement_no_new_scope',2,'p_compound_statement_no_new_scope','Parser130.py',622),
  ('compound_statement_no_new_scope -> LEFT_BRACE statement_list RIGHT_BRACE','compound_statement_no_new_scope',3,'p_compound_statement_no_new_scope','Parser130.py',623),
  ('statement_list -> statement','statement_list',1,'p_statement_list','Parser130.py',627),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','Parser130.py',628),
  ('expression_statement -> SEMICOLON','expression_statement',1,'p_expression_statement','Parser130.py',632),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','Parser130.py',633),
  ('selection_statement -> IF LEFT_PAREN expression RIGHT_PAREN selection_rest_statement','selection_statement',5,'p_selection_statement','Parser130.py',637),
  ('selection_rest_statement -> statement ELSE statement','selection_rest_statement',3,'p_selection_rest_statement','Parser130.py',641),
  ('selection_rest_statement -> statement','selection_rest_statement',1,'p_selection_rest_statement','Parser130.py',642),
  ('condition -> expression','condition',1,'p_condition','Parser130.py',646),
  ('condition -> fully_specified_type IDENTIFIER EQUAL initializer','condition',4,'p_condition','Parser130.py',647),
  ('switch_statement -> SWITCH LEFT_PAREN expression RIGHT_PAREN LEFT_BRACE switch_statement_list RIGHT_BRACE','switch_statement',7,'p_switch_statement','Parser130.py',651),
  ('switch_statement_list -> <empty>','switch_statement_list',0,'p_switch_statement_list','Parser130.py',655),
  ('switch_statement_list -> statement_list','switch_statement_list',1,'p_switch_statement_list','Parser130.py',656),
  ('case_label -> CASE expression COLON','case_label',3,'p_case_label','Parser130.py',660),
  ('case_label -> DEFAULT COLON','case_label',2,'p_case_label','Parser130.py',661),
  ('iteration_statement -> WHILE LEFT_PAREN condition RIGHT_PAREN statement_no_new_scope','iteration_statement',5,'p_iteration_statement','Parser130.py',665),
  ('iteration_statement -> DO statement WHILE LEFT_PAREN expression RIGHT_PAREN SEMICOLON','iteration_statement',7,'p_iteration_statement','Parser130.py',666),
  ('iteration_statement -> FOR LEFT_PAREN for_init_statement for_rest_statement RIGHT_PAREN','iteration_statement',5,'p_iteration_statement','Parser130.py',667),
  ('iteration_statement -> statement_no_new_scope','iteration_statement',1,'p_iteration_statement','Parser130.py',668),
  ('for_init_statement -> expression_statement','for_init_statement',1,'p_for_init_statement','Parser130.py',672),
  ('for_init_statement -> declaration_statement','for_init_statement',1,'p_for_init_statement','Parser130.py',673),
  ('conditionopt -> condition','conditionopt',1,'p_conditionopt','Parser130.py',677),
  ('conditionopt -> <empty>','conditionopt',0,'p_conditionopt','Parser130.py',678),
  ('for_rest_statement -> conditionopt SEMICOLON','for_rest_statement',2,'p_for_rest_statement','Parser130.py',682),
  ('for_rest_statement -> conditionopt SEMICOLON expression','for_rest_statement',3,'p_for_rest_statement','Parser130.py',683),
  ('jump_statement -> CONTINUE SEMICOLON','jump_statement',2,'p_jump_statement','Parser130.py',688),
  ('jump_statement -> BREAK SEMICOLON','jump_statement',2,'p_jump_statement','Parser130.py',689),
  ('jump_statement -> RETURN SEMICOLON','jump_statement',2,'p_jump_statement','Parser130.py',690),
  ('jump_statement -> RETURN expression SEMICOLON','jump_statement',3,'p_jump_statement','Parser130.py',691),
  ('jump_statement -> DISCARD SEMICOLON','jump_statement',2,'p_jump_statement','Parser130.py',692),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','Parser130.py',696),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','Parser130.py',697),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','Parser130.py',701),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','Parser130.py',702),
  ('function_definition -> function_prototype compound_statement_no_new_scope','function_definition',2,'p_function_definition','Parser130.py',706),
]
